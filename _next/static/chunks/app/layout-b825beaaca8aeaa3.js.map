{"version":3,"file":"static/chunks/app/layout-b825beaaca8aeaa3.js","mappings":"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","sources":["webpack://_N_E/?7294","webpack://_N_E/./components/layout/theme/EmotionCacheProvider.tsx","webpack://_N_E/./components/layout/theme/WebsiteThemeProvider.tsx","webpack://_N_E/./styles/main.css","webpack://_N_E/./styles/syntax-highlighting.css","webpack://_N_E/./node_modules/next/font/google/target.css","webpack://_N_E/<anon>"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/home/runner/work/nadundesilva.github.io/nadundesilva.github.io/components/layout/theme/WebsiteThemeProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/nadundesilva.github.io/nadundesilva.github.io/node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app/layout.tsx\\\",\\\"import\\\":\\\"Roboto\\\",\\\"arguments\\\":[{\\\"weight\\\":\\\"400\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"roboto\\\"}\");\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/nadundesilva.github.io/nadundesilva.github.io/styles/main.css\");\nimport(/* webpackMode: \"eager\" */ \"/home/runner/work/nadundesilva.github.io/nadundesilva.github.io/styles/syntax-highlighting.css\")","\"use client\";\n/*\n * Nadun De Silva - All Rights Reserved\n *\n * This source code and its associated files are the\n * confidential and proprietary information of Nadun De Silva.\n * Unauthorized reproduction, distribution, or disclosure\n * in any form, in whole or in part, is strictly prohibited\n * except as explicitly provided under a separate license\n * agreement with Nadun De Silva.\n *\n * Website: https://nadundesilva.github.io\n *\n * © 2023 Nadun De Silva. All rights reserved.\n */\nimport createCache, { type EmotionCache } from \"@emotion/cache\";\nimport { CacheProvider as DefaultCacheProvider } from \"@emotion/react\";\nimport { useServerInsertedHTML } from \"next/navigation\";\nimport * as React from \"react\";\n\nexport interface EmotionCacheProviderProps {\n    CacheProvider?: (props: {\n        value: EmotionCache;\n        children: React.ReactNode;\n    }) => React.JSX.Element | null;\n    children: React.ReactNode;\n}\n\nexport default function EmotionCacheProvider(\n    props: EmotionCacheProviderProps,\n): React.ReactElement {\n    const { CacheProvider = DefaultCacheProvider, children } = props;\n\n    const [registry] = React.useState(() => {\n        const cache = createCache({ key: \"css\" });\n        cache.compat = true;\n        const prevInsert = cache.insert;\n        let inserted: Array<{ name: string; isGlobal: boolean }> = [];\n        cache.insert = (...args) => {\n            const [selector, serialized] = args;\n            if (cache.inserted[serialized.name] === undefined) {\n                inserted.push({\n                    name: serialized.name,\n                    isGlobal: selector === undefined,\n                });\n            }\n            return prevInsert(...args);\n        };\n        const flush = (): Array<{ name: string; isGlobal: boolean }> => {\n            const prevInserted = inserted;\n            inserted = [];\n            return prevInserted;\n        };\n        return { cache, flush };\n    });\n\n    useServerInsertedHTML(() => {\n        const inserted = registry.flush();\n        if (inserted.length === 0) {\n            return null;\n        }\n        let styles = \"\";\n        let dataEmotionAttribute = registry.cache.key;\n\n        const globals: Array<{\n            name: string;\n            style: string;\n        }> = [];\n\n        inserted.forEach(({ name, isGlobal }) => {\n            const style = registry.cache.inserted[name];\n\n            if (typeof style !== \"boolean\") {\n                if (isGlobal) {\n                    globals.push({ name, style });\n                } else {\n                    styles += style;\n                    dataEmotionAttribute += ` ${name}`;\n                }\n            }\n        });\n\n        return (\n            <React.Fragment>\n                {globals.map(({ name, style }) => (\n                    <style\n                        key={name}\n                        data-emotion={`${registry.cache.key}-global ${name}`}\n                        dangerouslySetInnerHTML={{ __html: style }}\n                    />\n                ))}\n                {styles !== undefined && (\n                    <style\n                        data-emotion={dataEmotionAttribute}\n                        dangerouslySetInnerHTML={{ __html: styles }}\n                    />\n                )}\n            </React.Fragment>\n        );\n    });\n\n    return <CacheProvider value={registry.cache}>{children}</CacheProvider>;\n}\n","\"use client\";\n/*\n * Nadun De Silva - All Rights Reserved\n *\n * This source code and its associated files are the\n * confidential and proprietary information of Nadun De Silva.\n * Unauthorized reproduction, distribution, or disclosure\n * in any form, in whole or in part, is strictly prohibited\n * except as explicitly provided under a separate license\n * agreement with Nadun De Silva.\n *\n * Website: https://nadundesilva.github.io\n *\n * © 2023 Nadun De Silva. All rights reserved.\n */\nimport {\n    createTheme,\n    CssBaseline,\n    StyledEngineProvider,\n    type Theme,\n    ThemeProvider,\n    useMediaQuery,\n} from \"@mui/material\";\nimport { grey, indigo } from \"@mui/material/colors\";\nimport React, { useMemo, useEffect, useState, useContext } from \"react\";\n\nimport EmotionCacheProvider from \"./EmotionCacheProvider\";\n\nexport type ColorScheme = \"dark\" | \"light\";\nconst colorSchemes = [\"dark\", \"light\"];\n\nconst COLOR_SCHEME_KEY = \"COLOR_SCHEME\";\n\nconst getStoredColorScheme = (): ColorScheme | null => {\n    let storedColorScheme: string | null;\n    try {\n        storedColorScheme = localStorage.getItem(COLOR_SCHEME_KEY);\n    } catch {\n        storedColorScheme = null;\n    }\n    return storedColorScheme !== null &&\n        colorSchemes.includes(storedColorScheme)\n        ? (storedColorScheme as ColorScheme)\n        : null;\n};\n\nconst createWebsiteTheme = (colorScheme: ColorScheme): Theme => {\n    return createTheme({\n        palette: {\n            mode: colorScheme,\n            primary: indigo,\n            secondary: indigo,\n        },\n        components: {\n            MuiLink: {\n                styleOverrides: {\n                    root: {\n                        color: grey[700],\n                        textDecoration: \"none\",\n                    },\n                },\n            },\n        },\n    });\n};\n\ninterface WebsiteThemeContext {\n    theme: Theme;\n    colorScheme: ColorScheme;\n    setColorScheme: (newColorScheme: ColorScheme) => void;\n}\n\nconst defaultColorScheme = getStoredColorScheme() ?? \"light\";\n\nconst WebsiteTheme = React.createContext<WebsiteThemeContext>({\n    theme: createWebsiteTheme(defaultColorScheme),\n    colorScheme: defaultColorScheme,\n    setColorScheme: () => {\n        throw Error(\"Setting color theme not implemented\");\n    },\n});\n\ninterface WebsiteThemeProviderProps {\n    children: React.ReactNode;\n}\n\nconst WebsiteThemeProvider = ({\n    children,\n}: WebsiteThemeProviderProps): React.ReactElement => {\n    const preferedColorScheme: ColorScheme = useMediaQuery(\n        \"(prefers-color-scheme: dark)\",\n    )\n        ? \"dark\"\n        : \"light\";\n    const initialStoredColorScheme = getStoredColorScheme();\n\n    const [colorScheme, setColorScheme] = useState<ColorScheme>(\n        initialStoredColorScheme === null\n            ? preferedColorScheme\n            : initialStoredColorScheme,\n    );\n\n    const storageListener = (): void => {\n        const storedColorScheme = getStoredColorScheme();\n        if (storedColorScheme !== null) {\n            setColorScheme(storedColorScheme);\n        }\n    };\n    useEffect(() => {\n        window.addEventListener(\"storage\", storageListener);\n        return (): void => {\n            window.removeEventListener(\"storage\", storageListener);\n        };\n    });\n\n    const theme = useMemo(() => createWebsiteTheme(colorScheme), [colorScheme]);\n    return (\n        <EmotionCacheProvider>\n            <StyledEngineProvider injectFirst>\n                <ThemeProvider theme={theme}>\n                    <CssBaseline />\n                    <WebsiteTheme.Provider\n                        value={{\n                            theme,\n                            colorScheme,\n                            setColorScheme: (\n                                newColorScheme: ColorScheme,\n                            ): void => {\n                                try {\n                                    localStorage.setItem(\n                                        COLOR_SCHEME_KEY,\n                                        newColorScheme,\n                                    );\n                                } catch {}\n                                setColorScheme(newColorScheme);\n                            },\n                        }}\n                    >\n                        {children}\n                    </WebsiteTheme.Provider>\n                </ThemeProvider>\n            </StyledEngineProvider>\n        </EmotionCacheProvider>\n    );\n};\n\nexport const useWebsiteTheme = (): WebsiteThemeContext => {\n    return useContext(WebsiteTheme);\n};\n\nexport default WebsiteThemeProvider;\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Roboto_a789c4', '__Roboto_Fallback_a789c4'\",\"fontWeight\":400,\"fontStyle\":\"normal\"},\"className\":\"__className_a789c4\"};"],"names":["Promise","resolve","then","__webpack_require__","bind","t","getStoredColorScheme","EmotionCacheProvider","props","_props_CacheProvider","CacheProvider","DefaultCacheProvider","children","registry","React","cache","createCache","key","compat","prevInsert","insert","inserted","args","selector","serialized","undefined","name","push","isGlobal","_to_consumable_array","_","flush","prevInserted","useServerInsertedHTML","length","styles","dataEmotionAttribute","globals","forEach","param","style","concat","jsx_runtime","jsxs","map","jsx","data-emotion","dangerouslySetInnerHTML","__html","value","colorSchemes","COLOR_SCHEME_KEY","storedColorScheme","localStorage","getItem","e","includes","createWebsiteTheme","colorScheme","createTheme","palette","mode","primary","indigo","secondary","components","MuiLink","styleOverrides","root","color","grey","textDecoration","defaultColorScheme","WebsiteTheme","theme","setColorScheme","Error","useWebsiteTheme","useContext","theme_WebsiteThemeProvider","preferedColorScheme","useMediaQuery","initialStoredColorScheme","useState","storageListener","useEffect","window","addEventListener","removeEventListener","useMemo","StyledEngineProvider","injectFirst","ThemeProvider","CssBaseline","Provider","newColorScheme","setItem","module","exports"],"sourceRoot":""}